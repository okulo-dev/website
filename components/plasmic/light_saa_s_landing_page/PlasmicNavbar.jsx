// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAKfZafnfzEvtQB4DYUAe
// Component: gVGVMBx2x42k
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Logo from "../../Logo"; // plasmic-import: Z2neU2nUq1Gm/component
import Button from "../../Button"; // plasmic-import: 1njYuUl2Bkl4/component
import { useScreenVariants as useScreenVariantsa5G59FrFlpm9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: a5g59frFLPM9/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jLAKfZafnfzEvtQB4DYUAe/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: gVGVMBx2x42k/css

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array("products", "contact");

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "products",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.products
      },
      {
        path: "contact",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.contact
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa5G59FrFlpm9()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcontact]: hasVariant($state, "contact", "contact"),
          [sty.rootproducts]: hasVariant($state, "products", "products")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___3UqMl, {
          [sty.freeBoxcontact___3UqMlxlo5F]: hasVariant(
            $state,
            "contact",
            "contact"
          ),
          [sty.freeBoxproducts___3UqMldDx8S]: hasVariant(
            $state,
            "products",
            "products"
          )
        })}
      >
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo)}
          largeLogo={
            hasVariant(globalVariants, "screen", "mobile") ? undefined : true
          }
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__a8ZAu)}
        >
          <Button
            className={classNames("__wab_instance", sty.button___05CxO, {
              [sty.buttoncontact___05CxOxlo5F]: hasVariant(
                $state,
                "contact",
                "contact"
              ),
              [sty.buttonproducts___05CxOdDx8S]: hasVariant(
                $state,
                "products",
                "products"
              )
            })}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__n7E4N)}
                role={"img"}
              />
            }
            link={`/`}
            onClick={async event => {
              const $steps = {};
              $steps["updateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["variable"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateVariable"] != null &&
                typeof $steps["updateVariable"] === "object" &&
                typeof $steps["updateVariable"].then === "function"
              ) {
                $steps["updateVariable"] = await $steps["updateVariable"];
              }
            }}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___62Iqn)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vfOXo,
                {
                  [sty.textcontact__vfOXoxlo5F]: hasVariant(
                    $state,
                    "contact",
                    "contact"
                  ),
                  [sty.textproducts__vfOXodDx8S]: hasVariant(
                    $state,
                    "products",
                    "products"
                  )
                }
              )}
            >
              {"Home"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__o8YCf, {
              [sty.buttonproducts__o8YCFdDx8S]: hasVariant(
                $state,
                "products",
                "products"
              )
            })}
            color={"navLink"}
          >
            <Button
              data-plasmic-name={"oProductsButton"}
              data-plasmic-override={overrides.oProductsButton}
              className={classNames("__wab_instance", sty.oProductsButton, {
                [sty.oProductsButtonproducts]: hasVariant(
                  $state,
                  "products",
                  "products"
                )
              })}
              color={"navLink"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__tOhg0)}
                  role={"img"}
                />
              }
              link={`/products`}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__rslnl)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pzdU,
                  {
                    [sty.textproducts__pzdUdDx8S]: hasVariant(
                      $state,
                      "products",
                      "products"
                    )
                  }
                )}
              >
                {"Products"}
              </div>
            </Button>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__cseOa, {
              [sty.buttoncontact__cseOAxlo5F]: hasVariant(
                $state,
                "contact",
                "contact"
              )
            })}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__cXxv)}
                role={"img"}
              />
            }
            link={`/contact`}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__jw28L)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5A5Wz,
                {
                  [sty.textcontact___5A5WZxlo5F]: hasVariant(
                    $state,
                    "contact",
                    "contact"
                  )
                }
              )}
            >
              {"Contact"}
            </div>
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___4Hn8D)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__soVbu)}
            color={"navLinkBlue"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___18YbI)}
                role={"img"}
              />
            }
            link={`/contact`}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__zQUrB)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1AfDe
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Get a quote"
                : "Get a quote"}
            </div>
          </Button>
        </Stack__>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo", "oProductsButton"],
  logo: ["logo"],
  oProductsButton: ["oProductsButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    oProductsButton: makeNodeComponent("oProductsButton"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
