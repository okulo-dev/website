// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAKfZafnfzEvtQB4DYUAe
// Component: F7Z9Aw6tb2mz
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsa5G59FrFlpm9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: a5g59frFLPM9/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jLAKfZafnfzEvtQB4DYUAe/projectcss
import sty from "./PlasmicOStatistics.module.css"; // plasmic-import: F7Z9Aw6tb2mz/css

createPlasmicElementProxy;

export const PlasmicOStatistics__VariantProps = new Array();

export const PlasmicOStatistics__ArgProps = new Array();

const $$ = {};

function PlasmicOStatistics__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa5G59FrFlpm9()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__gj6Q)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__yOtGj
            )}
          >
            {"37%"}
          </h3>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__i791B
            )}
          >
            {"of all businesses and organizations were hit by ransomware."}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__nqG0J)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__sb61W
            )}
          >
            {hasVariant(globalVariants, "screen", "mobile") ? "5,2X" : "57%"}
          </h3>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vpa2E
            )}
          >
            {hasVariant(globalVariants, "screen", "mobile")
              ? "Average traffic increase"
              : "of businesses are successful in recovering their data using a backup."}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column___5RMj)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3___3Ecw
            )}
          >
            {"6000+"}
          </h3>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ta87E
            )}
          >
            {"change this one"}
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOStatistics__ArgProps,
          internalVariantPropNames: PlasmicOStatistics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOStatistics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOStatistics";
  } else {
    func.displayName = `PlasmicOStatistics.${nodeName}`;
  }
  return func;
}

export const PlasmicOStatistics = Object.assign(
  // Top-level PlasmicOStatistics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicOStatistics
    internalVariantProps: PlasmicOStatistics__VariantProps,
    internalArgProps: PlasmicOStatistics__ArgProps
  }
);

export default PlasmicOStatistics;
/* prettier-ignore-end */
